# frozen_string_literal: true

# vim: set syntax=ruby:
require 'pathname'
require 'yaml'
SRCROOT = Pathname.new(__FILE__).join('../../').realpath
BUILD_TOOLS = SRCROOT.join('BuildTools')
Project = YAML.load_file(SRCROOT.join('project.yml').to_s)

desc 'Update project file'
lane :xcodegen do
  Dir.chdir(SRCROOT.to_s) do
    generate_metal(path: 'Frameworks/BismushKit/Entity/Metal/FunctionName.swift')

    Project['targets'].each do |target, _info|
      xcfilelist target: target
    end

    File.open('BuildTools/FileLists/Shaders.xcfilelist', 'w') do |io|
      SRCROOT.glob('Frameworks/**/*.metal').each do |path|
        io.puts path
      end
    end
    sh 'xcodegen'
  end
end

private_lane :generate_filelist do |option|
  SRCROOT.glob(option[:glob]) do |path|
    option[:output].puts path.to_s
  end
end

private_lane :xcfilelist do |options|
  target = options[:target]
  info = Project['targets'][target]
  platform = info['platform']
  targets = if platform.is_a? Array
              info['platform'].map { "#{target}_#{_1}" }
            else
              [target]
            end
  targets.each do |target|
    File.open("BuildTools/FileLists/#{target}.xcfilelist", 'w') do |io|
      info['sources'].each do |source|
        Pathname.new(source).glob('**/*.swift') do |path|
          io.puts path
        end
      end
    end
  end
end

private_lane :generate_metal do |option|
  function_names = []
  Dir.glob('**/*.metal') do |file|
    File.readlines(file).each do |line|
      function_names << Regexp.last_match(1) if line =~ /^(?:kernel|vertex|fragment)\s+\w+\s+(\w+)/
    end
  end

  File.open(option[:path].to_s, 'w') do |io|
    io.puts <<~PREFIX
      // DO NOT EDIT. This file is generated by #{__FILE__}.
      enum FunctionName: String {
    PREFIX

    function_names.each do |function_name|
      head, *tail = function_name.split('_')
      const_name = head + tail.map(&:capitalize).join('')
      io.puts %(  case #{const_name} = "#{function_name}" )
    end

    io.puts '}'
  end

  Dir.chdir(BUILD_TOOLS.to_s) do
    sh 'swift', 'run', '-c', 'release', 'swiftformat', SRCROOT.join(option[:path]).to_s
  end
end
