require 'pathname'
require 'yaml'
SRCROOT = Pathname.new(__FILE__).join("../../").realpath
BUILD_TOOLS = SRCROOT.join('BuildTools')
Project = YAML.load_file(SRCROOT.join('project.yml').to_s)

desc "Update project file"
lane :xcodegen do
  Dir.chdir(SRCROOT.to_s) do
    generate_metal(path: "Frameworks/BismushKit/Entity/Metal/FunctionName.swift")

    Project['targets'].each do |target, info|
        File.open("BuildTools/#{target}.xcfilelist", 'w') do |io|
        info['sources'].each do |source|
          Pathname.new(source).glob('**/*.swift') do |path|
            io.puts path
          end
         end
      end
    end

    File.open('BuildTools/Shaders.xcfilelist', 'w') do |io|
      SRCROOT.glob('Frameworks/**/*.metal').each do |path|
        io.puts path
      end
    end
    sh "xcodegen"
  end
end

private_lane :generate_filelist do |option|
  SRCROOT.glob(option[:glob]) do |path|
    option[:output].puts path.to_s
  end
end

private_lane :generate_metal do |option|
  function_names = []
  Dir.glob('**/*.metal') do |file|
    File.readlines(file).each do |line|
      if line =~ /^(?:kernel|vertex|fragment)\s+\w+\s+(\w+)/
        function_names << $1
      end
    end
  end

  open(option[:path].to_s, 'w') do |io|
    io.puts <<END
// DO NOT EDIT. This file is generated by #{__FILE__}.
enum FunctionName: String {
END

    for function_name in function_names do
      head, *tail = function_name.split('_')
      const_name = head + tail.map(&:capitalize).join('')
      io.puts %Q/  case #{const_name} = "#{function_name}" /
    end

    io.puts '}'
  end

  Dir.chdir(BUILD_TOOLS.to_s) do
    sh 'swift', 'run', '-c', 'release', 'swiftformat', SRCROOT.join(option[:path]).to_s
  end
end
